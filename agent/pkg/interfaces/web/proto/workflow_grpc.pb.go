// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: pkg/interfaces/web/proto/workflow.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkflowController_RunWorkflow_FullMethodName  = "/proto.WorkflowController/RunWorkflow"
	WorkflowController_StopWorkflow_FullMethodName = "/proto.WorkflowController/StopWorkflow"
)

// WorkflowControllerClient is the client API for WorkflowController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowControllerClient interface {
	RunWorkflow(ctx context.Context, in *RunWorkflowRequest, opts ...grpc.CallOption) (*RunWorkflowResponse, error)
	StopWorkflow(ctx context.Context, in *StopWorkflowRequest, opts ...grpc.CallOption) (*StopWorkflowResponse, error)
}

type workflowControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowControllerClient(cc grpc.ClientConnInterface) WorkflowControllerClient {
	return &workflowControllerClient{cc}
}

func (c *workflowControllerClient) RunWorkflow(ctx context.Context, in *RunWorkflowRequest, opts ...grpc.CallOption) (*RunWorkflowResponse, error) {
	out := new(RunWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowController_RunWorkflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowControllerClient) StopWorkflow(ctx context.Context, in *StopWorkflowRequest, opts ...grpc.CallOption) (*StopWorkflowResponse, error) {
	out := new(StopWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowController_StopWorkflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowControllerServer is the server API for WorkflowController service.
// All implementations must embed UnimplementedWorkflowControllerServer
// for forward compatibility
type WorkflowControllerServer interface {
	RunWorkflow(context.Context, *RunWorkflowRequest) (*RunWorkflowResponse, error)
	StopWorkflow(context.Context, *StopWorkflowRequest) (*StopWorkflowResponse, error)
	mustEmbedUnimplementedWorkflowControllerServer()
}

// UnimplementedWorkflowControllerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowControllerServer struct {
}

func (UnimplementedWorkflowControllerServer) RunWorkflow(context.Context, *RunWorkflowRequest) (*RunWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunWorkflow not implemented")
}
func (UnimplementedWorkflowControllerServer) StopWorkflow(context.Context, *StopWorkflowRequest) (*StopWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWorkflow not implemented")
}
func (UnimplementedWorkflowControllerServer) mustEmbedUnimplementedWorkflowControllerServer() {}

// UnsafeWorkflowControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowControllerServer will
// result in compilation errors.
type UnsafeWorkflowControllerServer interface {
	mustEmbedUnimplementedWorkflowControllerServer()
}

func RegisterWorkflowControllerServer(s grpc.ServiceRegistrar, srv WorkflowControllerServer) {
	s.RegisterService(&WorkflowController_ServiceDesc, srv)
}

func _WorkflowController_RunWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowControllerServer).RunWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowController_RunWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowControllerServer).RunWorkflow(ctx, req.(*RunWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowController_StopWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowControllerServer).StopWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowController_StopWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowControllerServer).StopWorkflow(ctx, req.(*StopWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowController_ServiceDesc is the grpc.ServiceDesc for WorkflowController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WorkflowController",
	HandlerType: (*WorkflowControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunWorkflow",
			Handler:    _WorkflowController_RunWorkflow_Handler,
		},
		{
			MethodName: "StopWorkflow",
			Handler:    _WorkflowController_StopWorkflow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/interfaces/web/proto/workflow.proto",
}
