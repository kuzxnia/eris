// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/workflow/action_executor.go
//
// Generated by this command:
//
//	mockgen -source=pkg/workflow/action_executor.go -destination=tests/unit/mocks/action_executor_mock.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	workflow "github.com/kuzxnia/eris/control-plane/pkg/workflow"
	gomock "go.uber.org/mock/gomock"
)

// MockActionExecutor is a mock of ActionExecutor interface.
type MockActionExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockActionExecutorMockRecorder
	isgomock struct{}
}

// MockActionExecutorMockRecorder is the mock recorder for MockActionExecutor.
type MockActionExecutorMockRecorder struct {
	mock *MockActionExecutor
}

// NewMockActionExecutor creates a new mock instance.
func NewMockActionExecutor(ctrl *gomock.Controller) *MockActionExecutor {
	mock := &MockActionExecutor{ctrl: ctrl}
	mock.recorder = &MockActionExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionExecutor) EXPECT() *MockActionExecutorMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockActionExecutor) Run(arg0 *workflow.ActionExecutionContext) (chan *workflow.ActionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(chan *workflow.ActionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockActionExecutorMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockActionExecutor)(nil).Run), arg0)
}
