// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/clients/resource_client.go
//
// Generated by this command:
//
//	mockgen -source=pkg/clients/resource_client.go -destination=tests/unit/mocks/resource_client_mock.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	pkg "github.com/kuzxnia/eris/control-plane/pkg"
	gomock "go.uber.org/mock/gomock"
)

// MockResourceClient is a mock of ResourceClient interface.
type MockResourceClient struct {
	ctrl     *gomock.Controller
	recorder *MockResourceClientMockRecorder
	isgomock struct{}
}

// MockResourceClientMockRecorder is the mock recorder for MockResourceClient.
type MockResourceClientMockRecorder struct {
	mock *MockResourceClient
}

// NewMockResourceClient creates a new mock instance.
func NewMockResourceClient(ctrl *gomock.Controller) *MockResourceClient {
	mock := &MockResourceClient{ctrl: ctrl}
	mock.recorder = &MockResourceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceClient) EXPECT() *MockResourceClientMockRecorder {
	return m.recorder
}

// GetApiV1Resource mocks base method.
func (m *MockResourceClient) GetApiV1Resource(url string, selector *pkg.Selector) ([]*pkg.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiV1Resource", url, selector)
	ret0, _ := ret[0].([]*pkg.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiV1Resource indicates an expected call of GetApiV1Resource.
func (mr *MockResourceClientMockRecorder) GetApiV1Resource(url, selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiV1Resource", reflect.TypeOf((*MockResourceClient)(nil).GetApiV1Resource), url, selector)
}
