// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/workflow/workflow_repository.go
//
// Generated by this command:
//
//	mockgen -source=pkg/workflow/workflow_repository.go -destination=tests/unit/mocks/workflow_repository_mock.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	workflow "github.com/kuzxnia/eris/control-plane/pkg/workflow"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkflowRepository is a mock of WorkflowRepository interface.
type MockWorkflowRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowRepositoryMockRecorder
	isgomock struct{}
}

// MockWorkflowRepositoryMockRecorder is the mock recorder for MockWorkflowRepository.
type MockWorkflowRepositoryMockRecorder struct {
	mock *MockWorkflowRepository
}

// NewMockWorkflowRepository creates a new mock instance.
func NewMockWorkflowRepository(ctrl *gomock.Controller) *MockWorkflowRepository {
	mock := &MockWorkflowRepository{ctrl: ctrl}
	mock.recorder = &MockWorkflowRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowRepository) EXPECT() *MockWorkflowRepositoryMockRecorder {
	return m.recorder
}

// CreateWorkflow mocks base method.
func (m *MockWorkflowRepository) CreateWorkflow(arg0 *workflow.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflow", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorkflow indicates an expected call of CreateWorkflow.
func (mr *MockWorkflowRepositoryMockRecorder) CreateWorkflow(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflow", reflect.TypeOf((*MockWorkflowRepository)(nil).CreateWorkflow), arg0)
}

// GetWorkflow mocks base method.
func (m *MockWorkflowRepository) GetWorkflow(arg0 string) (*workflow.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflow", arg0)
	ret0, _ := ret[0].(*workflow.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflow indicates an expected call of GetWorkflow.
func (mr *MockWorkflowRepositoryMockRecorder) GetWorkflow(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflow", reflect.TypeOf((*MockWorkflowRepository)(nil).GetWorkflow), arg0)
}

// UpdateWorkflow mocks base method.
func (m *MockWorkflowRepository) UpdateWorkflow(arg0 *workflow.Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflow", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkflow indicates an expected call of UpdateWorkflow.
func (mr *MockWorkflowRepositoryMockRecorder) UpdateWorkflow(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflow", reflect.TypeOf((*MockWorkflowRepository)(nil).UpdateWorkflow), arg0)
}

// MockWorkflowConfigRepository is a mock of WorkflowConfigRepository interface.
type MockWorkflowConfigRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowConfigRepositoryMockRecorder
	isgomock struct{}
}

// MockWorkflowConfigRepositoryMockRecorder is the mock recorder for MockWorkflowConfigRepository.
type MockWorkflowConfigRepositoryMockRecorder struct {
	mock *MockWorkflowConfigRepository
}

// NewMockWorkflowConfigRepository creates a new mock instance.
func NewMockWorkflowConfigRepository(ctrl *gomock.Controller) *MockWorkflowConfigRepository {
	mock := &MockWorkflowConfigRepository{ctrl: ctrl}
	mock.recorder = &MockWorkflowConfigRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowConfigRepository) EXPECT() *MockWorkflowConfigRepositoryMockRecorder {
	return m.recorder
}

// CreateWorkflowConfig mocks base method.
func (m *MockWorkflowConfigRepository) CreateWorkflowConfig(arg0 *workflow.WorkflowConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorkflowConfig indicates an expected call of CreateWorkflowConfig.
func (mr *MockWorkflowConfigRepositoryMockRecorder) CreateWorkflowConfig(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowConfig", reflect.TypeOf((*MockWorkflowConfigRepository)(nil).CreateWorkflowConfig), arg0)
}

// GetWorkflowConfig mocks base method.
func (m *MockWorkflowConfigRepository) GetWorkflowConfig(arg0 string) (*workflow.WorkflowConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowConfig", arg0)
	ret0, _ := ret[0].(*workflow.WorkflowConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowConfig indicates an expected call of GetWorkflowConfig.
func (mr *MockWorkflowConfigRepositoryMockRecorder) GetWorkflowConfig(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowConfig", reflect.TypeOf((*MockWorkflowConfigRepository)(nil).GetWorkflowConfig), arg0)
}

// UpdateWorkflowConfig mocks base method.
func (m *MockWorkflowConfigRepository) UpdateWorkflowConfig(arg0 *workflow.WorkflowConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkflowConfig indicates an expected call of UpdateWorkflowConfig.
func (mr *MockWorkflowConfigRepositoryMockRecorder) UpdateWorkflowConfig(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowConfig", reflect.TypeOf((*MockWorkflowConfigRepository)(nil).UpdateWorkflowConfig), arg0)
}
